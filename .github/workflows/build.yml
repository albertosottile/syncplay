name: Build
on: push

jobs:
  macos:
    name: Build for macOS
    runs-on: macos-10.15
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'

      - name: Check Python install
        run: |
          which python3
          python3 --version
          which pip3
          pip3 --version

      - name: Install Python dependencies
        run: |
          pip3 install -U setuptools wheel pip
          pip3 install twisted[tls] appnope requests certifi
          pip3 install shiboken2==5.13.1 pyside2==5.13.1
          pip3 install py2app

      - name: Check Python dependencies
        run: |
          python3 -c "from PySide2 import __version__; print(__version__)"
          python3 -c "from PySide2.QtCore import __version__; print(__version__)"
          python3 -c "from PySide2.QtCore import QLibraryInfo; print(QLibraryInfo.location(QLibraryInfo.LibrariesPath))"
          python3 -c "import ssl; print(ssl)"
          python3 -c "from py2app.recipes import pyside2"
          echo $DYLD_LIBRARY_PATH
          echo $DYLD_FRAMEWORK_PATH
          python3 -c 'from distutils.sysconfig import get_config_var; print(get_config_var("LDLIBRARY"))'
          ls -al /Users/runner/hostedtoolcache/Python/3.7.9/x64/lib/*.dylib

      - name: Build
        run: |
          python3 ci/pyside2_linker.py
          export LIBPYTHON_FOLDER="$(python3 -c 'from distutils.sysconfig import get_config_var; print(get_config_var("LIBDIR"))')"
          ln -s $LIBPYTHON_FOLDER/libpython3.7m.dylib $LIBPYTHON_FOLDER/libpython3.7.dylib
          export DYLD_FRAMEWORK_PATH="$(python3 -c 'from PySide2.QtCore import QLibraryInfo; print(QLibraryInfo.location(QLibraryInfo.LibrariesPath))')"
          export DYLD_LIBRARY_PATH="$(python3 -c 'import os.path, PySide2; print(os.path.dirname(PySide2.__file__))'):$(python3 -c 'import os.path, shiboken2; print(os.path.dirname(shiboken2.__file__))')"
          python3 buildPy2app.py py2app

      - name: Prepare for deployment
        run: |
          ls -al
          export VER="$(cat syncplay/__init__.py | awk '/version/ {gsub("\047", "", $3); print $NF}')"
          echo "VER=$VER" >> $GITHUB_ENV
          mkdir dist_bintray
          ci/macos-deploy.sh
          ls -al dist_bintray

      - name: Deploy
        uses: actions/upload-artifact@v2
        with:
          name: Syncplay_${{ env.VER }}.dmg
          path: |
            dist_bintray/Syncplay_${{ env.VER }}.dmg

  snapcraft:
    name: Build for Snap
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Snapcraft with LXD
        uses: samuelmeuli/action-snapcraft@v1
        with:
          use_lxd: true

      - name: Build
        run: sg lxd -c 'snapcraft --use-lxd'

      - name: Prepare for deployment
        run: |
          ls -al
          export VER="$(cat syncplay/__init__.py | awk '/version/ {gsub("\047", "", $3); print $NF}')"
          echo "VER=$VER" >> $GITHUB_ENV
          mkdir dist_bintray
          mv syncplay_build_amd64.snap dist_bintray/syncplay_${VER}_amd64.snap
          ls -al dist_bintray

      - name: Deploy
        uses: actions/upload-artifact@v2
        with:
          name: syncplay_${{ env.VER }}_amd64.snap
          path: |
            dist_bintray/syncplay_${{ env.VER }}_amd64.snap

  appimage:
    name: Build AppImage
    runs-on: ubuntu-16.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get install libxkbcommon-x11-0

      - name: Build
        run: ci/appimage-script.sh

      - name: Prepare for deployment
        run: |
          ls -al
          export VER="$(cat syncplay/__init__.py | awk '/version/ {gsub("\047", "", $3); print $NF}')"
          echo "VER=$VER" >> $GITHUB_ENV
          mkdir dist_bintray
          ci/appimage-deploy.sh
          ls -al dist_bintray

      - name: Deploy
        uses: actions/upload-artifact@v2
        with:
          name: Syncplay-${{ env.VER }}-x86_64.AppImage
          path: |
            dist_bintray/Syncplay-${{ env.VER }}-x86_64.AppImage

  deb:
    name: Build Debian package
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Build
        run: ci/deb-script.sh

      - name: Test
        run: ci/deb-installation-test.sh

      - name: Prepare for deployment
        run: |
          ls -al
          export VER="$(cat syncplay/__init__.py | awk '/version/ {gsub("\047", "", $3); print $NF}')"
          echo "VER=$VER" >> $GITHUB_ENV
          mkdir dist_bintray
          mv /tmp/syncplay.deb dist_bintray/syncplay_${VER}.deb
          ls -al dist_bintray

      - name: Deploy
        uses: actions/upload-artifact@v2
        with:
          name: syncplay_${{ env.VER }}.deb
          path: |
            dist_bintray/syncplay_${{ env.VER }}.deb
